.trivy_scan:
  stage: test
  image:
    name: docker.io/aquasec/trivy:0.47.0
    entrypoint: [""]
  variables:
    # the below prevents the clone of this repository for scanning
    # Currently this is configured to work on provided images only
    GIT_STRATEGY: none
    # the below is the same default image as the build job in `kaniko.yaml`
    CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  # before_script:
  #   # Import custom CA certificates
  #   - cp /etc/gitlab-runner/certs/* /usr/local/share/ca-certificates/
  #   - update-ca-certificates --fresh > /dev/null

  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does no remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Build report and puts it in the $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --cache-dir .trivycache/ image --exit-code 0 --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$CONTAINER_IMAGE"
    # Prints full report
    - time trivy --cache-dir .trivycache/ image --exit-code 0 --no-progress "$CONTAINER_IMAGE"
    # Fail on critical vulnerabilities
    - time trivy --cache-dir .trivycache/ image --exit-code 1 --severity CRITICAL --no-progress "$CONTAINER_IMAGE"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json


